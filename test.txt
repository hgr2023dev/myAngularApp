import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpErrorResponse,
} from '@angular/common/http';
import {
  BehaviorSubject,
  Observable,
  catchError,
  filter,
  switchMap,
  take,
  throwError,
} from 'rxjs';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  private isRefreshing = false;
  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(
    null
  );
  global: any;

  constructor() {}

  intercept(
    request: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    const headerToken = localStorage.getItem('authToken');
    if (!request.headers.has('Content-Type')) {
      if (request.url.includes('UploadFilesForRosterProcess')) {
        request = request.clone({
          // headers: request.headers.set('Content-Type', 'multipart/form-data'),
        });
      } else {
        request = request.clone({
          headers: request.headers.set('Content-Type', 'application/json'),
        });
      }
    }

    if (headerToken) {
      request = request.clone({
        setHeaders: {
          Authorization: `Bearer ${headerToken}`,
        },
        withCredentials: true,
      });
    }

    return next.handle(request).pipe(
      catchError((error) => {
        if (error instanceof HttpErrorResponse && error.status === 401) {
          return this.handle401Error(request, next);
        } else {
          return throwError(error);
        }
      })
    ) as Observable<HttpEvent<any>>;
  }
  private addToken(request: HttpRequest<any>, token: string) {
    return request.clone({
      setHeaders: {
        Authorization: `Bearer ${token}`,
      },
    });
  }

  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {
    if (!this.isRefreshing) {
      this.isRefreshing = true;
      this.refreshTokenSubject.next(null);

      return this.global.refreshToken().pipe(
        switchMap((data: any) => {
          //console.log('switchMap:' + data.data);
          this.isRefreshing = false;
          this.refreshTokenSubject.next(data.data.token);
          return next.handle(this.addToken(request, data.data.token));
        })
      );
    } else {
      return this.refreshTokenSubject.pipe(
        filter((data) => data != null),
        take(1),
        switchMap((res) => {
          return next.handle(this.addToken(request, res));
        })
      );
    }
  }
}
