import { catchError, finalize, tap } from 'rxjs/operators';
import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpResponse,
} from '@angular/common/http';
import { Observable, Subscription } from 'rxjs';
import { NgxSpinnerService } from 'ngx-spinner';

const bodyScrollClass: string = 'loaderBodyScrollFix';

@Injectable()
export class SpinnerInterceptor implements HttpInterceptor {
  private renderer: Renderer2;
  constructor(
    private spinner: NgxSpinnerService,
    private rendererFactory: RendererFactory2
  ) {
    this.renderer = rendererFactory.createRenderer(null, null);
  }

  intercept(
    request: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    const start = performance.now();
    this.showLoader();
    return next.handle(request).pipe(
      tap(
        async (event: HttpEvent<any>) => {
          if (event instanceof HttpResponse) {
            this.onEnd();
          }
        },
        (err: any) => {
          this.onEnd();
        }
      )
    );
  }

  private onEnd(): void {
    this.hideLoader();
  }
  private showLoader(): void {
    this.spinner.show();
  }
  private hideLoader(): void {
    this.spinner.hide();
  }
  public hideLoaderIfErrorOccured(): void {
    this.spinner.hide();
  }
}
